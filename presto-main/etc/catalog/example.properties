#
# WARNING
# ^^^^^^^
# This configuration file is for development only and should NOT be used be
# used in production. For example configuration, see the Presto documentation.
#

# PrestoServer jvm arguments:
# -ea -XX:+UseG1GC -XX:G1HeapRegionSize=32M -XX:+UseGCOverheadLimit -XX:+ExplicitGCInvokesConcurrent -Xmx2G -Dconfig=etc/config.properties -Dlog.levels-file=etc/log.properties

# cd /Users/will/workspace/presto/presto-main/etc/http-example-files && python3 -m http.server
# /Users/will/workspace/presto/presto-cli/target/presto-cli-*-executable.jar --server localhost:8080 --catalog=example --schema=tpch
# /Users/will/workspace/presto/presto-cli/target/presto-cli-*-executable.jar --server localhost:8080 --catalog=tpch --schema=tiny

## presto dashboard
## http://localhost:8080/ui/

## Working SQLs

# 1)
# select orderdate, orderkey , (o.orderkey + 1000) as NewOrderKey, max(totalprice), count(*) as count, (select count(*) from lineitem l where l.orderkey = o.orderkey) as items
# from orders as o
# where totalprice > 10000 and exists (select * from lineitem l where l.orderkey = o.orderkey)
# group by orderdate, orderkey
# order by orderdate desc
# limit 5;

# 2)
# select Customer as customerId, OrderKey as orderId, (select count(*) from lineitem l where l.orderkey = o.OrderKey) as items
# from orders as o (OrderKey, Customer, Status, TotalPrice, Date, OrderPriority, Clerk, ShipPriority, Comment)
# order by Customer desc
# limit 5;

# 3)
# with itemstats as (select orderkey, count(*) as ordercount from lineitem group by orderkey)
# select Customer as customerId, OrderKey as orderId, (select ordercount from itemstats s where s.orderkey = o.OrderKey) as items
# from orders as o (OrderKey, Customer, Status, TotalPrice, Date, OrderPriority, Clerk, ShipPriority, Comment)
# order by Customer desc
# limit 5;

#4)
#select Customer as customerId, myorderkey as orderId, count(Clerk) + 1000 as clerkCount -- MyOrderKey or myorderkey is both OK
#from orders as o (MyOrderKey, Customer, Status, TotalPrice, Date, OrderPriority, Clerk, ShipPriority, Comment)
#group by Customer, Date, MyOrderKey                                                     -- group by columns MUST come from the relation
#order by customerId desc, MyOrderKey asc, Date, clerkCount, sum(TotalPrice)             -- order by columns can be from both relation and select outputs
#limit 5;

# 6)
#select Customer as customerId, myorderkey as orderId, ShipPriority + 10
#from orders as o (MyOrderKey, Customer, Status, TotalPrice, Date, OrderPriority, Clerk, ShipPriority, Comment)
#order by customerId, TotalPrice
#limit 5

# 6)
# select count(*) from Orders
# select count(*) from Orders order by sum(TotalPrice)



## Not Working SQLs
# 1)
#select Customer as customerId, MyOrderKey as orderId, count(Clerk) + 1000
#from orders as o (MyOrderKey, Customer, Status, TotalPrice, Date, OrderPriority, Clerk, ShipPriority, Comment)
#group by Customer, Date, MyOrderKey
#order by customerId desc, MyOrderKey asc, TotalPrice
#limit 5;

# 2)
#select Customer as customerId, MyOrderKey as orderId
#from orders as o (MyOrderKey, Customer, Status, TotalPrice, Date, OrderPriority, Clerk, ShipPriority, Comment)
#order by customerId desc, MyOrderKey asc, max(TotalPrice)
#limit 5;

# 3)
#select Customer as customerId, MyOrderKey as orderId, count(Clerk) + 1000
#from orders as o (MyOrderKey, Customer, Status, TotalPrice, Date, OrderPriority, Clerk, ShipPriority, Comment)
#group by max(Customer), Date, MyOrderKey                         -- group by columns MUST come from the relation
#order by customerId desc, MyOrderKey asc, max(TotalPrice)   -- order by columns can be from both relation and select outputs
#limit 5;

connector.name=example-http
metadata-uri=http://localhost:8000/example-metadata.json
